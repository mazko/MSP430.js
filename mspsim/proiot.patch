diff --git a/Makefile b/Makefile
index 427ffe5..07f93a5 100644
--- a/Makefile
+++ b/Makefile
@@ -81,7 +81,7 @@ TIMERTEST := tests/timertest.firmware
 SCRIPTS := ${addprefix scripts/,autorun.sc duty.sc}
 BINARY := README.txt license.txt CHANGE_LOG.txt images/*.jpg images/*.png firmware/*/*.firmware ${SCRIPTS}
 
-PACKAGES := se/sics/mspsim ${addprefix se/sics/mspsim/,core chip cli config debug platform ${addprefix platform/,esb sky jcreate sentillausb z1 tyndall ti wismote} plugin profiler emulink net ui util extutil/highlight extutil/jfreechart}
+PACKAGES := se/sics/mspsim ${addprefix se/sics/mspsim/,core chip cli config debug platform ${addprefix platform/,esb sky jcreate sentillausb z1 tyndall ti wismote proiot3 proiot4} plugin profiler emulink net ui util extutil/highlight extutil/jfreechart}
 
 SOURCES := ${wildcard *.java $(addsuffix /*.java,$(PACKAGES))}
 
diff --git a/se/sics/mspsim/emulink/EmuLink.java b/se/sics/mspsim/emulink/EmuLink.java
index 155af60..9dd8155 100755
--- a/se/sics/mspsim/emulink/EmuLink.java
+++ b/se/sics/mspsim/emulink/EmuLink.java
@@ -56,7 +56,7 @@ import se.sics.mspsim.core.MSP430Constants;
 import se.sics.mspsim.platform.GenericNode;
 import se.sics.mspsim.util.Utils;
 
-public class EmuLink {
+public class EmuLink implements IEmuLinkWriter {
 
     private Socket socket;
     private BufferedReader in;
@@ -65,7 +65,7 @@ public class EmuLink {
     private long globalEtime = 0L;
     private long globalLastTime = 0L;
 
-    private final Hashtable<String, GenericNode> nodes = new Hashtable<String, GenericNode>();
+    protected final Hashtable<String, GenericNode> nodes = new Hashtable<String, GenericNode>();
 
     public boolean isConnected() {
         return !isConnected;
@@ -97,6 +97,11 @@ public class EmuLink {
             return false;
         }
         nodes.put(id, node);
+
+        if (node instanceof se.sics.mspsim.platform.IProiotNode) {
+          ((se.sics.mspsim.platform.IProiotNode)node).setEmuLink(this);
+        }
+
         return true;
     }
     
@@ -151,8 +156,12 @@ public class EmuLink {
         }
     };
 
+    private static String upToNCharacters(final String s, final int n) {
+        return s.substring(0, Math.min(s.length(), n));
+    }
+
     protected boolean handleMessage(JSONObject json) {
-        System.out.println("EmuLink: RECV " + json.toJSONString());
+        System.out.println("EmuLink: RECV " + upToNCharacters(json.toJSONString(), 333));
         String event = json.getAsString("event");
         if ("emulation_control".equals(event)) {
             String command = json.getAsString("data");
@@ -228,8 +237,25 @@ public class EmuLink {
 
                 // Time to close the connection
                 return false;
+            } else if (command.startsWith("proiot$")) {
+                String[] nodes = getNodes(json);
+                Object cmdValue = json.get("proiot$value");
+                if (nodes == null) {
+                    for (GenericNode node : this.nodes.values()) {
+                        ((se.sics.mspsim.platform.IProiotNode)node).handleMoreCmd(command, cmdValue);
+                    }
+                } else {
+                    for(String id : nodes) {
+                        GenericNode node = this.nodes.get(id);
+                        if (node != null) {
+                            ((se.sics.mspsim.platform.IProiotNode)node).handleMoreCmd(command, cmdValue);
+                        } else {
+                            System.err.println("EmuLink: could not find node '" + id + "'");
+                        }
+                    }
+                }
             }
-            sendToSimulator("{\"response\":\"emulation_control\",\"data\":1}");
+            sendToSimulator("{\"response\":\"emulation_control\",\"data\":\"" + command + "\"}");
 
         } else if ("create".equals(event)) {
             createNodes(json);
@@ -237,11 +263,12 @@ public class EmuLink {
         } else if ("write".equals(event)) {
             String[] nodes = getNodes(json);
             String file = json.getAsString("file");
+            JSONArray elf8 = json.getJSONArray("elf8");
             if (nodes == null) {
                 System.err.println("EmuLink: no node specified for write");
-            } else if (file == null) {
-                System.err.println("EmuLink: no file specified for write");
-            } else if (!new File(file).isFile()) {
+            } else if (file == null && elf8 == null) {
+                System.err.println("EmuLink: no file or elf8 specified for write");
+            } else if (elf8 == null && !new File(file).isFile()) {
                 System.err.println("EmuLink: could not find file '" + file + "' for write");
             } else {
                 for(String id : nodes) {
@@ -251,7 +278,20 @@ public class EmuLink {
                         continue;
                     }
                     try {
-                        node.loadFirmware(file);
+                        if (elf8 == null) {
+                            node.loadFirmware(file);
+                        } else {
+                            byte[] elfBytes = new byte[elf8.size()];
+                            for(int i = 0; i < elfBytes.length; i++) {
+                                elfBytes[i] = (byte)(long)elf8.get(i);
+                            }
+                            // System.err.println(java.util.Arrays.toString(elfBytes));
+                            // try (java.io.FileOutputStream s = new java.io.FileOutputStream("bytes.dump.elf")) { s.write(elfBytes); }
+                            // echo `md5sum bytes.dump.elf | awk '{ print $1}'` firmware/proiot/a.out | md5sum -c -
+                            se.sics.mspsim.util.ELF elf = new se.sics.mspsim.util.ELF(elfBytes);
+                            elf.readAll();
+                            node.loadFirmware(elf);
+                        }
                         node.getCPU().reset();
                     } catch (IOException e) {
                         System.err.println("EmuLink: failed to load firmware '" + file + "'");
@@ -286,7 +326,8 @@ public class EmuLink {
         return true;
     }
 
-    protected void sendToSimulator(String message) {
+    @Override
+    public synchronized void sendToSimulator(String message) {
         if (out != null) {
             out.write(message);
             out.flush();
diff --git a/se/sics/mspsim/emulink/IEmuLinkWriter.java b/se/sics/mspsim/emulink/IEmuLinkWriter.java
new file mode 100644
index 0000000..59b8836
--- /dev/null
+++ b/se/sics/mspsim/emulink/IEmuLinkWriter.java
@@ -0,0 +1,5 @@
+package se.sics.mspsim.emulink;
+
+public interface IEmuLinkWriter {
+  void sendToSimulator(String message);
+}
\ No newline at end of file
diff --git a/se/sics/mspsim/emulink/WSEmuLink.java b/se/sics/mspsim/emulink/WSEmuLink.java
new file mode 100644
index 0000000..87659de
--- /dev/null
+++ b/se/sics/mspsim/emulink/WSEmuLink.java
@@ -0,0 +1,30 @@
+package se.sics.mspsim.emulink;
+
+import org.glassfish.tyrus.server.Server;
+
+final public class WSEmuLink {
+
+    final int PORT = 9148;
+
+    public void run() {
+
+        Server server = new Server("localhost", PORT, "/", null, WSEmuLinkEndpoint.class);
+
+        try {
+            server.start();
+            synchronized(WSEmuLink.class) {
+                WSEmuLink.class.wait();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            server.stop();
+        }
+    }
+
+
+    public static void main(String[] args) {
+        new WSEmuLink().run();
+    }
+
+}
diff --git a/se/sics/mspsim/emulink/WSEmuLinkEndpoint.java b/se/sics/mspsim/emulink/WSEmuLinkEndpoint.java
new file mode 100644
index 0000000..81358cd
--- /dev/null
+++ b/se/sics/mspsim/emulink/WSEmuLinkEndpoint.java
@@ -0,0 +1,135 @@
+package se.sics.mspsim.emulink;
+
+import java.io.IOException;
+
+import se.sics.json.JSONObject;
+import se.sics.json.ParseException;
+import se.sics.mspsim.platform.GenericNode;
+
+import javax.websocket.CloseReason;
+import javax.websocket.OnClose;
+import javax.websocket.OnMessage;
+import javax.websocket.OnOpen;
+import javax.websocket.OnError;
+import javax.websocket.Session;
+import javax.websocket.server.ServerEndpoint;
+import javax.websocket.MessageHandler;
+
+
+// https://blog.openshift.com/how-to-build-java-websocket-applications-using-the-jsr-356-api/
+// https://tyrus-project.github.io/documentation/1.13.1/user-guide.html
+// https://gist.github.com/mnstrspeed/9295199
+// https://abhirockzz.gitbooks.io/java-websocket-api-handbook/
+// https://hpbn.co/websocket/
+
+
+interface IEmuLinkTerminator {
+    void terminate();
+}
+
+
+class EmuLinkWrapper extends EmuLink {
+
+    private final Object padLock = new Object();
+
+    public boolean handleMessage(String msg) throws ParseException {
+        // http://juliusdavies.ca/json-simple-1.1.1-javadocs/org/json/simple/parser/JSONParser.html
+        // Parser for JSON text. Please note that JSONParser is NOT thread-safe.
+        synchronized (padLock) {
+            JSONObject json = JSONObject.parseJSONObject(msg);
+            return handleMessage(json);
+        }
+    }
+
+    public void stopAll(String reason) {
+        synchronized (padLock) {
+            for (GenericNode node : this.nodes.values()) {
+                if (node.getCPU().isRunning()) {
+                    System.out.println(node + " stopped because of " + reason);
+                }
+                node.stop();
+            }
+        }       
+    }
+
+}
+
+
+@ServerEndpoint(value = "/")
+public class WSEmuLinkEndpoint {
+
+    @OnOpen
+    public void onOpen(final Session session) {
+
+        System.out.println("Connected ... " + session.getId());
+
+        final EmuLinkWrapper emulink = new EmuLinkWrapper() {
+
+            private final Object padLock = new Object();
+
+            // https://blogs.oracle.com/pavelbucek/is-websocket-session-really-thread-safe
+            // 2+ threads: onMessage->EmuLink response + GenericNode[].run
+            // http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html
+            // - Session objects may be called by multiple threads. Implementations must ensure the integrity of the mutable properties of the session under such circumstances.
+            // http://docs.oracle.com/javaee/7/api/javax/websocket/RemoteEndpoint.Basic.html
+            // - if two threads attempt to call a send method concurrently, or if a developer attempts to send a new message while in the middle of sending an existing one, the send method called while the connection is already busy may throw an IllegalStateException.
+            @Override
+            public void sendToSimulator(String message) {
+                try {
+                    synchronized (padLock) {
+                        session.getBasicRemote().sendText(message);
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    if (session.isOpen()) {
+                        System.exit(-42);
+                    } else {
+                        System.out.println("Assume it's OK...");
+                    }
+                }
+            }
+        };
+
+        session.addMessageHandler(new MessageHandler.Whole<String>() {
+
+            @Override
+            public void onMessage(String message) {
+                // System.out.println("Thread onMessage # " + Thread.currentThread().getId());
+                // Each time different thread
+                try {
+                    if (!emulink.handleMessage(message)) {
+                        // currently not used and not tested
+                        System.out.println("JSON close socket command received ? " + message);
+                        session.close();
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    System.exit(-42);
+                }
+            }
+        });
+
+        session.getUserProperties().put("terminator", new IEmuLinkTerminator () {
+            @Override
+            public void terminate() {
+                emulink.stopAll("Session Closed");
+            }
+        });
+
+    }
+ 
+ 
+    @OnClose
+    public void onClose(Session session, CloseReason closeReason) {
+        System.out.println(String.format("Session %s closed because of %s", session.getId(), closeReason));
+        ((IEmuLinkTerminator)session.getUserProperties().get("terminator")).terminate();
+    }
+
+
+    @OnError
+    public void onError(Session session, Throwable t) {
+        t.printStackTrace();
+        System.exit(-42);
+    }
+
+}
diff --git a/se/sics/mspsim/platform/IProiotNode.java b/se/sics/mspsim/platform/IProiotNode.java
new file mode 100644
index 0000000..80e11d6
--- /dev/null
+++ b/se/sics/mspsim/platform/IProiotNode.java
@@ -0,0 +1,8 @@
+package se.sics.mspsim.platform;
+
+import se.sics.mspsim.emulink.IEmuLinkWriter;
+
+public interface IProiotNode {
+  void setEmuLink(IEmuLinkWriter emulink);
+  void handleMoreCmd(String cmd, Object value);
+}
diff --git a/se/sics/mspsim/platform/proiot3/Assert.java b/se/sics/mspsim/platform/proiot3/Assert.java
new file mode 100644
index 0000000..5bbe995
--- /dev/null
+++ b/se/sics/mspsim/platform/proiot3/Assert.java
@@ -0,0 +1,18 @@
+package se.sics.mspsim.platform.proiot3;
+
+
+public final class Assert {
+
+  private Assert() {}
+
+  static void ok(boolean cond, String msg) {
+    if (!cond) {
+      System.err.println("!!! ASSERT !!!: " + msg);
+      System.exit(42);
+    }
+  }
+
+  static void fail(String msg) {
+    ok(false, msg);
+  }
+}
diff --git a/se/sics/mspsim/platform/proiot3/Proiot3Node.java b/se/sics/mspsim/platform/proiot3/Proiot3Node.java
new file mode 100644
index 0000000..051cf3d
--- /dev/null
+++ b/se/sics/mspsim/platform/proiot3/Proiot3Node.java
@@ -0,0 +1,213 @@
+package se.sics.mspsim.platform.proiot3;
+
+import se.sics.mspsim.core.MSP430Constants;
+import se.sics.mspsim.config.MSP430f1611Config;
+import se.sics.mspsim.core.IOPort;
+import se.sics.mspsim.core.IOUnit;
+import se.sics.mspsim.core.PortListener;
+import se.sics.mspsim.platform.IProiotNode;
+import se.sics.mspsim.platform.GenericNode;
+import se.sics.mspsim.emulink.IEmuLinkWriter;
+import se.sics.mspsim.chip.Button;
+import se.sics.mspsim.ui.SerialMon;
+import se.sics.mspsim.core.USART;
+
+import java.util.HashMap;
+import java.awt.GraphicsEnvironment;
+
+import org.json.simple.JSONObject;
+
+
+public class Proiot3Node extends GenericNode implements IProiotNode {
+
+  private IEmuLinkWriter emulink;
+
+  private final Button[] buttons = new Button[8];
+  
+  // http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5
+  // For all reference types (§4.3), the default value is null
+  private SerialMon serialMon;
+
+  @Override
+  public void setEmuLink(IEmuLinkWriter emulink) {
+    this.emulink = emulink;
+  }
+
+  @Override
+  public void handleMoreCmd(final String cmd, final Object value) {
+    if ("proiot$button-1".equals(cmd)) {
+      for (final Button b : buttons) {
+        b.setPressed((boolean)value);
+      }
+    } else if (cmd.startsWith("proiot$button")) {
+      final String c = cmd.substring(cmd.length() - 1);
+      buttons[Integer.parseInt(c)].setPressed((boolean)value);
+    } else {
+      Assert.fail("ProiotNode: UNHANDLED \"" + cmd + "\" !!!");
+    }
+  }
+
+  public Proiot3Node() {
+    super("ProiotNode", new MSP430f1611Config());
+
+    setupNode();
+
+    System.out.println("ProiotNode: created, MSPSim " + MSP430Constants.VERSION);
+
+    // cpu.setDebug(true);
+  }
+
+  private void doEvent(String name, HashMap<String, Object> data) {
+    HashMap<String, Object> json = new HashMap<String, Object>();
+    json.put("proiot$event", name);
+    json.put("proiot$data", data);
+    json.put("proiot$ms", System.currentTimeMillis());
+    emulink.sendToSimulator(new JSONObject(json).toJSONString());
+  }
+
+  private void doEventPort(final IOPort source, final int data) {
+    HashMap<String, Object> json = new HashMap<String, Object>();
+    json.put("value", data);
+    json.put("id", source.getPort());
+    doEvent("port", json);
+  }
+
+  private void portSubscribe(final String portName) {
+    final IOPort port = cpu.getIOUnit(IOPort.class, portName);
+    port.addPortListener(new PortListener() {
+
+        private int portLastValue;
+
+        public void portWrite(final IOPort source, final int data) {
+          Assert.ok(port == source, "ProiotNode: port " + portName + " != source");
+          if (portLastValue != data) {
+            doEventPort(source, data);
+            portLastValue = data;
+          }
+        }
+    });
+  }
+
+  private void setupP2P3() {
+
+    final IOPort port2 = cpu.getIOUnit(IOPort.class, "P2"),
+                 port3 = cpu.getIOUnit(IOPort.class, "P3");
+
+    new Object() {
+
+      int port2LastValue;
+
+      // Anonymous inner classes can't have a constructor,
+      // so they're a pretty natural fit for instance initializers
+
+      {
+        port2.addPortListener(new PortListener() {
+            public void portWrite(final IOPort source, final int data) {
+              
+              // assert both listeners are in the same thread
+              // System.out.println("Thread PORT2 # " + Thread.currentThread().getId());
+
+              Assert.ok(port2 == source, "ProiotNode: port2 != source");
+              port2LastValue = data;
+            }
+        });
+
+        port3.addPortListener(new PortListener() {
+
+            int port3LastValue;
+
+            final int SSD1306_E = 0b10;
+            final int SSD1306_COMMAND_OR_DATA = 0b1;
+
+            private void ssd1306(final int data) {
+                // bit test ssd1306.E
+                if ( (data & SSD1306_E) != 0 && (port3LastValue & SSD1306_E) == 0 ) {
+                  HashMap<String, Object> json = new HashMap<String, Object>();
+                  json.put("value", port2LastValue);
+                  json.put("command", (data & SSD1306_COMMAND_OR_DATA) == 0);
+                  doEvent("ssd1306", json);
+                }
+            }
+
+            private void leds(final int data) {
+
+              final int LEDS_MASK = (serialMon == null ? 0xFF : 0b11001111) 
+                ^ SSD1306_E ^ SSD1306_COMMAND_OR_DATA; // P3(4,5) = USART0 TXD/RXD; 
+              
+              if ( (port3LastValue & LEDS_MASK) != (data & LEDS_MASK) ) {
+                doEventPort(port3, (data & LEDS_MASK));
+              }
+            }
+
+            public void portWrite(final IOPort source, final int data) {
+
+              // assert both listeners are in the same thread
+              // System.out.println("Thread PORT3 # " + Thread.currentThread().getId());
+
+              Assert.ok(port3 == source, "ProiotNode: port3 != source");
+
+              ssd1306(data);
+              leds(data);
+
+              port3LastValue = data;
+            }
+        });
+      }
+
+    };
+  }
+
+  private void setupNodePorts() {
+    setupP2P3();
+    portSubscribe("P4");
+    portSubscribe("P5");
+    portSubscribe("P6");
+
+    final IOPort port1 = cpu.getIOUnit(IOPort.class, "P1");
+    for (int i = 0; i < buttons.length; i++) {
+      buttons[i] = new Button("Button" + i, cpu, port1, i, true);
+    }
+  }
+
+  // see autorun.sc
+  private void setupUART() {
+    // Add some windows for listening to serial output
+    USART usart = cpu.getIOUnit(USART.class, "USART0");
+    Assert.ok(usart != null, "ProiotNode: USART0 ?");
+    if (!GraphicsEnvironment.isHeadless()) {
+      serialMon = new SerialMon(usart, "USART0 I/O P3(4,5)");
+    }
+  }
+
+  @Override
+  public void setupNode() {
+    setupNodePorts();
+    setupUART();
+  }
+
+  @Override
+  public int getModeMax() {
+    return 0;
+  }
+
+  @Override
+  public void start() {
+    if (serialMon != null) {
+      serialMon.start();  
+    }
+
+    super.start();
+  }
+
+  @Override
+  public void stop() {
+    System.out.println("ProiotNode: stopped " + cpu.info());
+    super.stop();
+
+    if (serialMon != null) {
+      serialMon.stop();
+    }
+
+  }
+
+}
diff --git a/se/sics/mspsim/platform/proiot4/Assert.java b/se/sics/mspsim/platform/proiot4/Assert.java
new file mode 100644
index 0000000..8d31a57
--- /dev/null
+++ b/se/sics/mspsim/platform/proiot4/Assert.java
@@ -0,0 +1,18 @@
+package se.sics.mspsim.platform.proiot4;
+
+
+public final class Assert {
+
+  private Assert() {}
+
+  static void ok(boolean cond, String msg) {
+    if (!cond) {
+      System.err.println("!!! ASSERT !!!: " + msg);
+      System.exit(42);
+    }
+  }
+
+  static void fail(String msg) {
+    ok(false, msg);
+  }
+}
diff --git a/se/sics/mspsim/platform/proiot4/Proiot4Node.java b/se/sics/mspsim/platform/proiot4/Proiot4Node.java
new file mode 100644
index 0000000..fc035f3
--- /dev/null
+++ b/se/sics/mspsim/platform/proiot4/Proiot4Node.java
@@ -0,0 +1,161 @@
+package se.sics.mspsim.platform.proiot4;
+
+import se.sics.mspsim.core.MSP430Constants;
+import se.sics.mspsim.config.MSP430f1611Config;
+import se.sics.mspsim.core.IOPort;
+import se.sics.mspsim.core.IOUnit;
+import se.sics.mspsim.core.PortListener;
+import se.sics.mspsim.platform.IProiotNode;
+import se.sics.mspsim.platform.GenericNode;
+import se.sics.mspsim.emulink.IEmuLinkWriter;
+import se.sics.mspsim.ui.SerialMon;
+import se.sics.mspsim.core.USART;
+
+import java.util.HashMap;
+import java.awt.GraphicsEnvironment;
+
+import org.json.simple.JSONObject;
+
+
+public class Proiot4Node extends GenericNode implements IProiotNode {
+
+  private IEmuLinkWriter emulink;
+  
+  // http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5
+  // For all reference types (§4.3), the default value is null
+  private SerialMon serialMon;
+
+  @Override
+  public void setEmuLink(IEmuLinkWriter emulink) {
+    this.emulink = emulink;
+  }
+
+  @Override
+  public void handleMoreCmd(final String cmd, final Object value) {
+    Assert.fail("ProiotNode: UNHANDLED \"" + cmd + "\" !!!");
+  }
+
+  public Proiot4Node() {
+    super("ProiotNode", new MSP430f1611Config());
+
+    setupNode();
+
+    System.out.println("ProiotNode: created, MSPSim " + MSP430Constants.VERSION);
+
+    // cpu.setDebug(true);
+  }
+
+  private void doEvent(String name, HashMap<String, Object> data) {
+    HashMap<String, Object> json = new HashMap<String, Object>();
+    json.put("proiot$event", name);
+    json.put("proiot$data", data);
+    json.put("proiot$ms", System.currentTimeMillis());
+    emulink.sendToSimulator(new JSONObject(json).toJSONString());
+  }
+
+  private void doEventPort(final IOPort source, final int data) {
+    HashMap<String, Object> json = new HashMap<String, Object>();
+    json.put("value", data);
+    json.put("id", source.getPort());
+    doEvent("port", json);
+  }
+
+  private void portSubscribe(final String portName) {
+    final IOPort port = cpu.getIOUnit(IOPort.class, portName);
+    port.addPortListener(new PortListener() {
+
+        private int portLastValue;
+
+        public void portWrite(final IOPort source, final int data) {
+          Assert.ok(port == source, "ProiotNode: port " + portName + " != source");
+          if (portLastValue != data) {
+            doEventPort(source, data);
+            portLastValue = data;
+          }
+        }
+    });
+  }
+
+  private void setupP3() {
+
+    final IOPort port3 = cpu.getIOUnit(IOPort.class, "P3");
+
+    port3.addPortListener(new PortListener() {
+
+        int port3LastValue;
+
+        private void leds(final int data) {
+
+          final int LEDS_MASK = (serialMon == null ? 0xFF : 0b11001111);
+          
+          if ( (port3LastValue & LEDS_MASK) != (data & LEDS_MASK) ) {
+            doEventPort(port3, (data & LEDS_MASK));
+          }
+        }
+
+        public void portWrite(final IOPort source, final int data) {
+
+          // assert both listeners are in the same thread
+          // System.out.println("Thread PORT3 # " + Thread.currentThread().getId());
+
+          Assert.ok(port3 == source, "ProiotNode: port3 != source");
+
+          leds(data);
+
+          port3LastValue = data;
+        }
+    });
+
+  }
+
+  private void setupNodePorts() {
+    portSubscribe("P1");
+    portSubscribe("P2");
+    setupP3();
+    portSubscribe("P4");
+    portSubscribe("P5");
+    portSubscribe("P6");
+  }
+
+  // see autorun.sc
+  private void setupUART() {
+    // Add some windows for listening to serial output
+    USART usart = cpu.getIOUnit(USART.class, "USART0");
+    Assert.ok(usart != null, "ProiotNode: USART0 ?");
+    if (!GraphicsEnvironment.isHeadless()) {
+      serialMon = new SerialMon(usart, "USART0 I/O P3(4,5)");
+    }
+  }
+
+  @Override
+  public void setupNode() {
+    setupNodePorts();
+    setupUART();
+  }
+
+  @Override
+  public int getModeMax() {
+    return 0;
+  }
+
+  @Override
+  public void start() {
+    if (serialMon != null) {
+      serialMon.start();  
+    }
+
+    super.start();
+  }
+
+  @Override
+  public void stop() {
+    System.out.println("ProiotNode: stopped " + cpu.info());
+    super.stop();
+
+    if (serialMon != null) {
+      serialMon.stop();
+    }
+
+  }
+
+}
